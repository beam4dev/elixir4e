# Functions

```elixir
Mix.install([
  {:kino, "~> 0.12.0"}
])

import IEx.Helpers
```

## Function calls

In the context of programming, a function is a named sequence of expressions that performs a computation. When you define a function, you specify the name and the sequence of statements. Later, you can invoke the function by name. We have already seen one example of a function invocation:

<!-- livebook:{"force_markdown":true} -->

```elixir
iex(1)> is_integer(3)
true
```

The name of the function is `is_integer`. The expression in parentheses is called the argument of the function. The argument is a value or variable (term) that we are passing into the function as input to the function. The result, for the `is_integer` function, is a boolean indicating whether the argument is an integer or not.

It is common to say that a function "takes" an argument and "returns" a result. The result is called the _return value_.

## Built-in functions

## Type conversion functions

## Math functions

## Random numbers

## Adding new functions

## Definitions and uses

## Flow of execution

## Parameters and arguments

## Fruitful functions and void functions

## Why functions?

## Debugging

## Glossary

## Exercises
